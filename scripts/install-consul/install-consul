#!/bin/bash
CONSUL_VERSION="${CONSUL_VERSION:=1.12.2+ent}"
CONSUL_TEMPLATE_VERSION="${CONSUL_TEMPLATE_VERSION:=0.29.1}"
ENVOY_VERSION="${ENVOY_VERSION:=1.20.2}"
DATACENTER="${DATACENTER:=dc1}"
DATACENTERS="${DATACENTERS:=1}"
BOOTSTRAP="${BOOTSTRAP:=3}"
CONSUL_CFG_DIR="/etc/consul.d"
CONSUL_INIT_CFG="consul.hcl" # Centralized agent config file name / used for systemd unit (distinguish between server and client)
CONSUL_INIT_CLT="client.hcl" # If server detected use this config
CONSUL_INIT_SRV="server.hcl" # If client detected use this config
ALT_DC=""
if [[ ("$DATACENTER" == "dc1") ]]; then ALT_DC="dc2"; fi
if [[ ("$DATACENTER" == "dc2") ]]; then ALT_DC="dc1"; fi

function version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

function update_consul_hcl() {
  local config_update="$1"
  local -r update_title="$2"
  local -r consul_hcl_path="$CONSUL_CFG_DIR/consul.hcl"

  echo "CONFIG UPDATE: $update_title ------> $consul_hcl_path"
  echo -ne "\n" | sudo tee --append "$consul_hcl_path"
  echo -e "$config_update" | sudo tee --append "$consul_hcl_path"
}

function create_consul_user() {
    username="$1"
    if ! getent passwd "$username" >/dev/null ; then
        sudo /usr/sbin/adduser --system "$username"
        sudo /usr/sbin/groupadd --force --system "$username"
        sudo /usr/sbin/usermod --gid "$username" "$username"
    fi
}

function setup_directories() {
  local -r dc="${1}"

  echo '[+] Configuring consul directories'
  # create and manage permissions on directories
  sudo mkdir --parents --mode=0755 \
    "/etc/consul.d/tls" \
    "/etc/consul-template.d" \
    "/opt/consul" \
    "/opt/consul/bin" \
    "/opt/consul/data" \
    ;
  sudo chown --recursive "consul:consul" \
    "/etc/consul.d" \
    "/etc/consul-template.d" \
    "/opt/consul" \
    "/opt/consul/bin" \
    "/opt/consul/data" \
    ;
  if [[ ("$HOSTNAME" == consul-$dc-server-*) ]]; then
    echo "[+] Configuring host as Consul Server..."
    sudo cp "/vagrant/consul/configs/$CONSUL_INIT_SRV" "/etc/consul.d/$CONSUL_INIT_CFG"
  else
    echo "[+] Configuring host as Consul Client..."
    sudo cp "/vagrant/consul/configs/$CONSUL_INIT_CLT" "/etc/consul.d/$CONSUL_INIT_CFG"
  fi
}

function install_consul() {
  local arch=""
  arch=$( [ "$(uname -m)" = aarch64 ] && echo arm64 || echo amd64)
  echo "[+] Installing Consul v$CONSUL_VERSION"
  curl \
    --silent "https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_${arch}.zip" \
    --output '/tmp/consul.zip' \
    --location \
    --fail
  unzip \
    -o "/tmp/consul.zip" \
    -d /tmp 1>/dev/null

  echo "[+] Moving consul binary to /usr/bin/consul"
  sudo mv "/tmp/consul" "/usr/bin/consul"
  sudo chown "consul:consul" "/usr/bin/consul"
  sudo chmod a+x "/usr/bin/consul"
}

function install_consul_template() {
  local arch=""
  arch=$( [ "$(uname -m)" = aarch64 ] && echo arm64 || echo amd64)
  echo "[+] Installing Consul-Template v$CONSUL_TEMPLATE_VERSION"
  curl --silent "https://releases.hashicorp.com/consul-template/${CONSUL_TEMPLATE_VERSION}/consul-template_${CONSUL_TEMPLATE_VERSION}_linux_${arch}.zip" --output '/tmp/consul-template.zip'  --location --fail
  unzip -o "/tmp/consul-template.zip" -d /tmp 1>/dev/null

  echo "[+] Moving consul binary to /usr/bin/consul-template"
  sudo mv "/tmp/consul-template" "/usr/bin/consul-template"
  sudo chown "consul:consul" "/usr/bin/consul-template"
  sudo chmod a+x "/usr/bin/consul-template"
}

function enable_gossip_encryption() {
  local keygen_file="/vagrant/consul/gossip/key"
  local gossip_key=""
  gossip_key="$( sudo cat "$keygen_file")"

  update_consul_hcl "encrypt = \"$gossip_key\"" "Gossip Encryption Key"
}

function run_consul_keygen() {
  local keygen_out="/vagrant/consul/gossip/key"

  local gossip_key;
  echo "[+] Generating Gossip Encryption key..."
  # Generate Gossip Encryption key
  if [[ -f "$keygen_out" ]]; then sudo rm -rf "$keygen_out"; fi
  sudo touch "$keygen_out"
  sudo consul keygen | sudo tee "$keygen_out"
  update_encryption_key_conf "$keygen_out"
}

function install_envoy() {
  local -r version="$1"
  local arch=""
  arch=$( [ "$(uname -m)" = aarch64 ] && echo arm64 || echo amd64)

  echo "[+] Installing Envoy Version v$version"
  wget --quiet "https://archive.tetratelabs.io/envoy/download/v${version}/envoy-v${version}-linux-${arch}.tar.xz" 1>/dev/null
  sudo tar -xf "envoy-v${version}-linux-${arch}.tar.xz" 1>/dev/null
  sudo chmod a+x "envoy-v${version}-linux-${arch}/bin/envoy"
  sudo mv "envoy-v${version}-linux-${arch}/bin/envoy" "/usr/bin/envoy"
  sudo rm -rf "envoy-v${version}-linux-${arch}.tar.xz" "envoy-v${version}-linux-${arch}"
}

function update_bootstrap_expect() {
    bootstrap_expect="bootstrap_expect = $BOOTSTRAP"
    update_consul_hcl "$bootstrap_expect" "Setting bootstrap_expect = $BOOTSTRAP"
}

function enable_consul_connect() {

  echo "[+] Enabling Consul Connect...."
  local consul_connect_config=""
  consul_connect_config=$( cat <<-CONFIG

connect {
  enabled = true
}
CONFIG
)

  echo "DC ($dc): CONNECT ENABLED: Updating consul.hcl with Consul Connect configuration...."
  update_consul_hcl "$consul_connect_config" "DC ($dc): Consul-Connect Configuration"
}

function enable_consul_ui() {
  local -r consul_ver="$1"
  local ui_enable=""

if version_gt "1.9.0" "$consul_ver"; then
  ui_enable=$( cat <<-CONFIG

ui = true
CONFIG
)
else
  ui_enable=$( cat <<-CONFIG

ui_config {
  enabled = true
}
CONFIG
)
fi


  echo "[+] ACL: Updating consul.hcl with default UI config...."
  update_consul_hcl "$ui_enable" "Consul UI Enablement"
}

function generate_bootstrap_token() {
  echo "[+] $HOSTNAME: Generating ACL initial management token...."
  local -r central_bootstrap="/vagrant/consul/acl/bootstrap"
  local uuid=""

  if [[ -f "$central_bootstrap" ]]; then sudo rm -rf "$central_bootstrap"; fi
  sudo touch "$central_bootstrap"
  uuid=$( uuidgen )
  echo "$uuid" | sudo tee "$central_bootstrap"
}

function enable_acls() {
  echo "[+] Generating Default Consul ACL configuration stanza...."
  local -r consul_ver="$1"
  local -r dc="$2"
  local rep_enable=""
  local uuid=""
  local -r central_bootstrap="/vagrant/consul/acl/bootstrap"
  local mgmt_token="initial_management"

  if version_gt "1.10.0" "$consul_ver"; then mgmt_token="master"; fi
  if [[ ("$dc" == "dc2") ]]; then rep_enable="enable_token_replication = true"; fi


  uuid="$( sudo cat "$central_bootstrap")"

  local consul_default_acl_config=""
  consul_default_acl_config=$( cat <<-CONFIG

acl {
  enabled = true
  default_policy = "allow"
  enable_token_persistence = true
  ${rep_enable}
  tokens {
    default     = "$uuid"
    $mgmt_token = "$uuid"
    replication = "$uuid"
  }
}
CONFIG
)

  echo "[+] ACL: Updating consul.hcl with default ACL allow all configuration...."
  update_consul_hcl "$consul_default_acl_config" "Consul Default ACL"
}

function bootstrap_consul_systemd_unit() {
  local dc="$1"
  local bootstrap=""
  local wan_join=""
  local svr_clnt=""
if [[ ("$HOSTNAME" == consul-$dc-server-*) ]]; then
  svr_clnt="-server"
  bootstrap="-bootstrap-expect ${BOOTSTRAP}"
fi

if [[ ("$DATACENTERS" -gt 1) ]]; then
  wan_join=$( cat <<-RETRY_WAN
-retry-join-wan consul-$ALT_DC-server-1 -retry-join-wan consul-$ALT_DC-server-2 \
-retry-join-wan consul-$ALT_DC-server-3 -retry-join-wan consul-$ALT_DC-server-4
RETRY_WAN
)
fi

(
cat <<-EOF
[Unit]
Description=consul agent
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/consul.d/$CONSUL_INIT_CFG

[Service]
EnvironmentFile=-/etc/consul.d/consul.env
Type=notify
User=consul
Group=consul
Restart=on-failure
ExecStart=/usr/bin/consul agent ${svr_clnt} \
  ${bootstrap} \
  -node ${HOSTNAME} -datacenter $dc \
  -retry-join consul-$dc-server-0 -retry-join consul-$dc-server-1 \
  -retry-join consul-$dc-server-2 -retry-join consul-$dc-server-3 \
  -retry-join consul-$dc-server-4 -retry-join-wan consul-$ALT_DC-server-0 \
  ${wan_join} \
  -config-dir=/etc/consul.d
ExecReload=/bin/kill -HUP $MAINPID

[Install]
WantedBy=multi-user.target
EOF
) | sudo tee /etc/systemd/system/consul.service

}

function install_systemd_file() {
  systemd_file="$1"
  echo "[+] Installing systemd file: $systemd_file"
  sudo cp "/vagrant/consul/systemd/$systemd_file" /etc/systemd/system
  sudo chmod 0664 "/etc/systemd/system/$systemd_file"
}

function run_systemd_daemon_reload() {
  # Create temp script to reload systemd daemon loader.
  cat <<-RELOAD > /etc/consul.d/daemon-reload.sh
#!/bin/bash
sudo systemctl daemon-reload &>/dev/null
sleep 2
RELOAD
  chmod +x /etc/consul.d/reload.sh
  echo "[+] Reloading systemd Consul unit file..."
  . "/etc/consul.d/daemon-reload.sh"
  sudo rm -rf "/etc/consul.d/daemon-reload.sh"
  echo "[+] systemctl daemon-reload successful!"
}

function start_consul() {
# Verify consul.hcl and start consul service
valid_cfg=$( consul validate "$CONSUL_CFG_DIR/consul.hcl" )
if [ "$valid_cfg" == 'Configuration is valid!' ]; then
  echo "Valid consul.hcl Configuration! Starting Consul service...."
  sudo systemctl start consul
else
  echo "$CONSUL_CFG_DIR/consul.hcl is INVALID!!!"
  return 1;
fi
}

function install_utility_script() {
  utility_script="$1"
  utility_script_parent_dir="$2"
  destination_filename="$utility_script"

  echo "[+] Installing script $utility_script file as: $destination_filename"
  sudo cp --verbose "/vagrant/scripts/$utility_script_parent_dir/$utility_script" "/usr/local/bin/$destination_filename"
  sudo chown --recursive "consul:consul" "/usr/local/bin/$destination_filename"
  sudo chmod 0755 "/usr/local/bin/$destination_filename"
}

function configure_agent() {
  local version="$CONSUL_VERSION"
  local enable_consul_ui=""
  local new_gossip_key=""
  local set_gossip_encryption=""
  local enable_consul_connect=""
  local bootstrap_acls=""
  local enable_acls=""

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --enable-consul-ui)
        enable_consul_ui="true"
        ;;
      --enable-consul-connect)
        enable_consul_connect="true"
        ;;
      --update-gossip-key)
        new_gossip_key="true"
        ;;
      --set-gossip-encryption)
        set_gossip_encryption="true"
        ;;
      --bootstrap-acls)
        bootstrap_acls="true"
        ;;
      --enable-acls)
        enable_acls="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        echo "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  if [[ ("$HOSTNAME" == consul-$DATACENTER-server-*) ]];then update_bootstrap_expect; fi

  [[ "$enable_consul_ui" == "true" ]] && enable_consul_ui "$CONSUL_VERSION"

  [[ "$new_gossip_key" == "true" ]] && run_consul_keygen

  [[ "$set_gossip_encryption" == "true" ]] && enable_gossip_encryption

  [[ ("$bootstrap_acls" == "true") ]] && generate_bootstrap_token

  [[ ("$enable_acls" == "true") ]] && enable_acls "$CONSUL_VERSION" "$DATACENTER"

  [[ ("$enable_consul_connect" == "true") ]] && enable_consul_connect
}

create_consul_user 'consul'
setup_directories "$DATACENTER"
install_consul
bootstrap_consul_systemd_unit "$DATACENTER"
install_consul_template
install_systemd_file consul-template.service
install_envoy "$ENVOY_VERSION"
install_utility_script upgrade-consul upgrade-consul
install_utility_script bootstrap-envoy-mesh-gw envoy-mesh-gw
install_utility_script kv-put-get.sh stress-testing
install_utility_script services.sh stress-testing
sudo systemctl enable --now consul.service
sudo systemctl enable --now consul-template.service
run_systemd_daemon_reload
configure_agent "$@"
if sudo -E PATH="$PATH" bash -c "command -v consul"; then echo "[+] Consul install complete!" && start_consul && exit 0;
else echo "[-] Could not find consul command. Aborting." && exit 1; fi