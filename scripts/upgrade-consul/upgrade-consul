#!/bin/bash


set -e
readonly CONSUL_OP_DIR="/opt/consul"
readonly DEFAULT_CONSUL_USER="consul"
readonly DOWNLOAD_PACKAGE_PATH="/tmp/consul.zip"
readonly CONSUL_BIN_DIR="$CONSUL_OP_DIR/bin"
readonly CONSUL_CFG_DIR="/etc/consul.d"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SYSTEM_BIN_DIR="/usr/local/bin"

readonly SCRIPT_NAME="$(basename "$0")" # 'basename' --> retrieves this script's basename (i.e., 'install-consul')

function print_usage {
  echo
  echo "Usage: upgrade-consul [OPTIONS]"
  echo
  echo "This script can be used to install Consul and its dependencies. This script has been tested with AWS Ubuntu 18.04 image."
  echo
  echo "Options:"
  echo
  echo -e "  --version\t\t\t  The version of Consul to install. Optional."
  echo
  echo "Examples:"
  echo
  echo "  Install Consul Enterprise v1.11.5:"
  echo "    install-consul --version 1.11.5+ent"
  echo
  echo "  Install Consul Open Source (OSS) v1.10.9:"
  echo "    install-consul --version 1.10.9"
  echo
}
# local -r (Local Read-Only Variable) i.e. you cannot change the value of variables.
function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_either_or {
  local -r arg1_name="$1"
  local -r arg1_value="$2"
  local -r arg2_name="$3"
  local -r arg2_value="$4"

  if [[ -z "$arg1_value" && -z "$arg2_value" ]]; then
    log_error "Either the value for '$arg1_name' or '$arg2_name' must be passed, both cannot be empty"
    print_usage
    exit 1
  fi
}

function retry {
  local -r cmd="$1"
  local -r description="$2"

  for i in $(seq 1 5); do
    log_info "$description"

    # The boolean operations with the exit status are there to temporarily circumvent the "set -e" at the
    # beginning of this script which exits the script immediatelly for error status while not losing the exit status code
    output=$(eval "$cmd") && exit_status=0 || exit_status=$?
    log_info "$output"
    if [[ $exit_status -eq 0 ]]; then
      echo "$output"
      return
    fi
    log_warn "$description failed. Will sleep for 10 seconds and try again."
    sleep 10
  done;

  log_error "$description failed after 5 attempts."
  exit $exit_status
}

function has_yum {
  [ -n "$(command -v yum)" ]
}

function has_apt_get {
  [ -n "$(command -v apt-get)" ]
}

function install_dependencies {
  log_info "Installing dependencies"

  if has_apt_get; then
    sudo apt-get update -y
    sudo apt-get install -y -q awscli curl unzip jq wget software-properties-common traceroute nmap socat
  elif has_yum; then
    sudo yum update -y
    sudo yum install -y awscli curl unzip jq wget software-properties-common traceroute nmap socat
  else
    log_error "Could not find apt-get or yum. Cannot install dependencies on this OS."
    exit 1
  fi
}

function fetch_binary {
  local -r version="$1"
  local download_url=""

  local cpu_arch
  cpu_arch="$(uname -m)"
  local binary_arch=""
  case "$cpu_arch" in
    x86_64)
      binary_arch="amd64"
      ;;
    x86)
      binary_arch="386"
      ;;
    arm64|aarch64)
      binary_arch="arm64"
      ;;
    arm*)
      # The following info is taken from https://www.consul.io/downloads
      #
      # Note for ARM users:
      #
      # Use Armelv5 for all 32-bit armel systems
      # Use Armhfv6 for all armhf systems with v6+ architecture
      # Use Arm64 for all v8 64-bit architectures
      # The following commands can help determine the right version for your system:
      #
      # $ uname -m
      # $ readelf -a /proc/self/exe | grep -q -c Tag_ABI_VFP_args && echo "armhf" || echo "armel"
      #
      local vfp_tag
      vfp_tag="$(readelf -a /proc/self/exe | grep -q -c Tag_ABI_VFP_args)"
      if [[ -z $vfp_tag  ]]; then
        binary_arch="armelv5"
      else
        binary_arch="armhfv6"
      fi
      ;;
    *)
      log_error "CPU architecture $cpu_arch is not a supported by Consul."
      exit 1
      ;;
    esac

  download_url="https://releases.hashicorp.com/consul/${version}/consul_${version}_linux_${binary_arch}.zip"

  retry \
    "curl -o '$DOWNLOAD_PACKAGE_PATH' '$download_url' --location --silent --fail --show-error" \
    "Downloading Consul to $DOWNLOAD_PACKAGE_PATH"
}

function install_binary {
  local -r username="$1"

  local -r bin_dir="$CONSUL_BIN_DIR"
  local -r consul_dest_path="$bin_dir/consul"

  unzip -d /tmp "$DOWNLOAD_PACKAGE_PATH"

  log_info "Moving Consul binary to $consul_dest_path"
  sudo mv "/tmp/consul" "$consul_dest_path"
  sudo chown "$username:$username" "$consul_dest_path"
  sudo chmod a+x "$consul_dest_path"

  local -r symlink_path="$SYSTEM_BIN_DIR/consul"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $consul_dest_path in $symlink_path"
    sudo ln -s "$consul_dest_path" "$symlink_path"
  fi
}

function upgrade_envoy {
  local -r version="$1"
  local envoy_bin="/usr/bin/envoy"



  local cpu_arch
  cpu_arch="$(uname -m)"
  local binary_arch=""
  case "$cpu_arch" in
    x86_64)
      binary_arch="amd64"
      ;;
    x86)
      binary_arch="386"
      ;;
    arm64|aarch64)
      binary_arch="arm64"
      ;;
    arm*)
      # The following info is taken from https://www.consul.io/downloads
      #
      # Note for ARM users:
      #
      # Use Armelv5 for all 32-bit armel systems
      # Use Armhfv6 for all armhf systems with v6+ architecture
      # Use Arm64 for all v8 64-bit architectures
      # The following commands can help determine the right version for your system:
      #
      # $ uname -m
      # $ readelf -a /proc/self/exe | grep -q -c Tag_ABI_VFP_args && echo "armhf" || echo "armel"
      #
      local vfp_tag
      vfp_tag="$(readelf -a /proc/self/exe | grep -q -c Tag_ABI_VFP_args)"
      if [[ -z $vfp_tag  ]]; then
        binary_arch="armelv5"
      else
        binary_arch="armhfv6"
      fi
      ;;
    *)
      log_error "CPU architecture $cpu_arch is not a supported by Consul."
      exit 1
      ;;
  esac


  log_info "[+] Removing previous Envoy binary at $envoy_bin"
  if [[ (-f "$envoy_bin") ]]; then sudo rm -rf "$envoy_bin"; fi
  log_info "[+] Installing Envoy Version $version"
  wget "https://archive.tetratelabs.io/envoy/download/v${version}/envoy-v${version}-linux-${binary_arch}.tar.xz"
  sudo tar -xf "envoy-v${version}-linux-${binary_arch}.tar.xz"
  sudo chmod +x "envoy-v${version}-linux-${binary_arch}/bin/envoy"
  sudo mv "envoy-v${version}-linux-${binary_arch}/bin/envoy" "/usr/bin/envoy"
  sudo rm -rf "envoy-v${version}-linux-${binary_arch}.tar.xz" "envoy-v${version}-linux-${binary_arch}"
}

function upgrade_consul {
  local consul_version=""
  local update_envoy="false"
  local envoy_version=""

  while [[ $# -gt 0 ]]; do
    local key="$1"
    case "$key" in
      --version)
        consul_version="$2"
        shift
        ;;
      --update-envoy)
        update_envoy="true"
        ;;
      --envoy-version)
        envoy_version="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac
    shift
  done

  assert_not_empty "--version" "$consul_version"
  if [[ "$update_envoy" == "true" ]]; then assert_not_empty "--envoy-version" "$envoy_version"; fi

  install_dependencies
  fetch_binary "$consul_version"
  install_binary "$DEFAULT_CONSUL_USER"

  if sudo -E PATH="$PATH" bash -c "command -v consul"; then
    log_info "Consul install complete!";
  else
    log_info "Could not find consul command. Aborting.";
    exit 1;
  fi

  if [[ "$update_envoy" == "true" ]]; then
    upgrade_envoy "$envoy_version"
    if sudo -E PATH="$PATH" bash -c "command -v envoy"; then
      log_info "Envoy install complete!";
    else
      log_info "Could not find envoy command. Aborting.";
      exit 1;
    fi
  fi

}

upgrade_consul "$@"